{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nconst useMiddleware = () => {\n  _s();\n  const inputRef = useRef(null);\n  const [qnaArr, setQnaArr] = useState([]);\n  const [isScrollTop, setIsScrollTop] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // 질문 Request 후 Response를 Set\n  const generateResponse = async newQuestion => {\n    setIsLoading(true);\n    setQnaArr([{\n      question: newQuestion,\n      answer: \"\"\n    }, ...qnaArr]);\n    if (inputRef.current) {\n      inputRef.current.value = \"\";\n    }\n    const requestOption = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n        // 'Authorization': 'Bearer ' + process.env.REACT_APP_API_KEY,\n      },\n\n      body: JSON.stringify({\n        newQuestion\n      })\n      // body: JSON.stringify({\n      //   prompt: newQuestion,\n      //   temperature: 0,\n      //   max_tokens: 2048,\n      //   top_p: 1,\n      //   frequency_penalty: 0,\n      //   presence_penalty: 0,\n      //   stop: ['/'],\n      // }),\n    };\n\n    await fetch(\"http://localhost:8080/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        newQuestion\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n      try {\n        setQnaArr([{\n          question: newQuestion,\n          answer: data\n        }, ...qnaArr]);\n        setIsLoading(false);\n      } catch (err) {\n        console.log(err);\n      }\n    });\n    // .then((res) => res.json())\n    // .then((res) => {\n    //   const answer = res.choices[0].text;\n    //   if (answer) {\n    //     setQnaArr([\n    //       {\n    //         question: newQuestion,\n    //         answer: answer,\n    //       },\n    //       ...qnaArr,\n    //     ]);\n    //     setIsLoading(false);\n    //   }\n    // });\n  };\n\n  // Scroll 이벤트\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [isScrollTop]);\n\n  // Scroll이 Top인지 아닌지 체크 후 Set로직\n  const handleScroll = () => {\n    if (window.scrollY > 160 && !isScrollTop) {\n      setIsScrollTop(true);\n    } else if (window.scrollY <= 160 && isScrollTop) {\n      setIsScrollTop(false);\n    }\n  };\n\n  // Input Submit 버튼\n  const sendClick = useCallback(() => {\n    var _inputRef$current;\n    if (inputRef.current && ((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value.trim()) !== \"\") {\n      var _inputRef$current2;\n      generateResponse((_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.value);\n    }\n  }, [qnaArr]);\n  const questionEnter = useCallback(e => {\n    var _inputRef$current3, _inputRef$current4;\n    if (e.key === \"Enter\" && inputRef.current && ((_inputRef$current3 = inputRef.current) === null || _inputRef$current3 === void 0 ? void 0 : _inputRef$current3.value.trim()) !== \"\") generateResponse((_inputRef$current4 = inputRef.current) === null || _inputRef$current4 === void 0 ? void 0 : _inputRef$current4.value);\n  }, [qnaArr]);\n  return {\n    qnaArr,\n    inputRef,\n    isScrollTop,\n    isLoading,\n    sendClick,\n    questionEnter\n  };\n};\n_s(useMiddleware, \"cSsOiQpMJFINo48LzSORf6RY5cg=\");\nexport default useMiddleware;","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","useMiddleware","_s","inputRef","qnaArr","setQnaArr","isScrollTop","setIsScrollTop","isLoading","setIsLoading","generateResponse","newQuestion","question","answer","current","value","requestOption","method","headers","body","JSON","stringify","fetch","then","res","json","data","console","log","err","window","addEventListener","handleScroll","removeEventListener","scrollY","sendClick","_inputRef$current","trim","_inputRef$current2","questionEnter","e","_inputRef$current3","_inputRef$current4","key"],"sources":["/Users/deepmedimac/Documents/parctice/gpt/client/src/hooks/useMiddleware.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { TQna } from \"../types/qna.type\";\n\nconst useMiddleware = () => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [qnaArr, setQnaArr] = useState<TQna[]>([]);\n  const [isScrollTop, setIsScrollTop] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // 질문 Request 후 Response를 Set\n  const generateResponse = async (newQuestion: string) => {\n    setIsLoading(true);\n    setQnaArr([{ question: newQuestion, answer: \"\" }, ...qnaArr]);\n    if (inputRef.current) {\n      inputRef.current.value = \"\";\n    }\n    const requestOption = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Authorization': 'Bearer ' + process.env.REACT_APP_API_KEY,\n      },\n      body: JSON.stringify({ newQuestion }),\n      // body: JSON.stringify({\n      //   prompt: newQuestion,\n      //   temperature: 0,\n      //   max_tokens: 2048,\n      //   top_p: 1,\n      //   frequency_penalty: 0,\n      //   presence_penalty: 0,\n      //   stop: ['/'],\n      // }),\n    };\n    await fetch(\"http://localhost:8080/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ newQuestion }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        try {\n          setQnaArr([\n            {\n              question: newQuestion,\n              answer: data,\n            },\n            ...qnaArr,\n          ]);\n          setIsLoading(false);\n        } catch (err) {\n          console.log(err);\n        }\n      });\n    // .then((res) => res.json())\n    // .then((res) => {\n    //   const answer = res.choices[0].text;\n    //   if (answer) {\n    //     setQnaArr([\n    //       {\n    //         question: newQuestion,\n    //         answer: answer,\n    //       },\n    //       ...qnaArr,\n    //     ]);\n    //     setIsLoading(false);\n    //   }\n    // });\n  };\n\n  // Scroll 이벤트\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [isScrollTop]);\n\n  // Scroll이 Top인지 아닌지 체크 후 Set로직\n  const handleScroll = () => {\n    if (window.scrollY > 160 && !isScrollTop) {\n      setIsScrollTop(true);\n    } else if (window.scrollY <= 160 && isScrollTop) {\n      setIsScrollTop(false);\n    }\n  };\n\n  // Input Submit 버튼\n  const sendClick = useCallback(() => {\n    if (inputRef.current && inputRef.current?.value.trim() !== \"\") {\n      generateResponse(inputRef.current?.value);\n    }\n  }, [qnaArr]);\n\n  const questionEnter = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (\n        e.key === \"Enter\" &&\n        inputRef.current &&\n        inputRef.current?.value.trim() !== \"\"\n      )\n        generateResponse(inputRef.current?.value);\n    },\n    [qnaArr]\n  );\n\n  return { qnaArr, inputRef, isScrollTop, isLoading, sendClick, questionEnter };\n};\n\nexport default useMiddleware;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}