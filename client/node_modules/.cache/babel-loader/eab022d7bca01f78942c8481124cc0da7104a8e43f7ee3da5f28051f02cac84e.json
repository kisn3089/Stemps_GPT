{"ast":null,"code":"var _jsxFileName = \"/Users/deepmedimac/Documents/parctice/gpt/src/components/Question/Question.tsx\";\nimport React from 'react';\nimport Input from '../atoms/Input/Input';\nimport * as Svg from '../atoms/icon/icon';\nimport { QuestioContainer, UpArrowContainer } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Question = _ref => {\n  let {\n    inputRef,\n    isScrollTop,\n    isLoading,\n    sendClick,\n    questionEnter\n  } = _ref;\n  const topHanlder = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  };\n\n  // const temp = (e: React.KeyboardEvent<HTMLInputElement>) => {\n  //   console.log('111111');\n\n  //   if (e.key === 'Enter') {\n  //     console.log('Enter');\n  //   }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(QuestioContainer, {\n      id: \"quest\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        ref: inputRef,\n        type: \"text\",\n        width: \"100%\",\n        onKeyDown: questionEnter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(Svg.Spinner, {\n        style: {\n          width: '35px',\n          cursor: 'not-allowed'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Svg.Send, {\n        onClick: sendClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UpArrowContainer, {\n      children: isScrollTop && /*#__PURE__*/_jsxDEV(Svg.UpArrow, {\n        onClick: topHanlder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = Question;\nexport default _c2 = /*#__PURE__*/React.memo(Question);\nvar _c, _c2;\n$RefreshReg$(_c, \"Question\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","Input","Svg","QuestioContainer","UpArrowContainer","jsxDEV","_jsxDEV","Fragment","_Fragment","Question","_ref","inputRef","isScrollTop","isLoading","sendClick","questionEnter","topHanlder","window","scrollTo","top","behavior","children","id","ref","type","width","onKeyDown","fileName","_jsxFileName","lineNumber","columnNumber","Spinner","style","cursor","Send","onClick","UpArrow","_c","_c2","memo","$RefreshReg$"],"sources":["/Users/deepmedimac/Documents/parctice/gpt/src/components/Question/Question.tsx"],"sourcesContent":["import React from 'react';\nimport Input from '../atoms/Input/Input';\nimport * as Svg from '../atoms/icon/icon';\nimport { QuestioContainer, UpArrowContainer } from './styles';\n\ninterface IQuestion {\n  inputRef: React.RefObject<HTMLInputElement>;\n  isScrollTop: boolean;\n  isLoading: boolean;\n  sendClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  questionEnter: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n}\n\nconst Question = ({\n  inputRef,\n  isScrollTop,\n  isLoading,\n  sendClick,\n  questionEnter,\n}: IQuestion) => {\n  const topHanlder = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  // const temp = (e: React.KeyboardEvent<HTMLInputElement>) => {\n  //   console.log('111111');\n\n  //   if (e.key === 'Enter') {\n  //     console.log('Enter');\n  //   }\n  // };\n\n  return (\n    <>\n      <QuestioContainer id=\"quest\">\n        <Input\n          ref={inputRef}\n          type=\"text\"\n          width=\"100%\"\n          onKeyDown={questionEnter}\n        />\n        {isLoading ? (\n          <Svg.Spinner style={{ width: '35px', cursor: 'not-allowed' }} />\n        ) : (\n          <Svg.Send onClick={sendClick} />\n        )}\n      </QuestioContainer>\n      <UpArrowContainer>\n        {isScrollTop && <Svg.UpArrow onClick={topHanlder} />}\n      </UpArrowContainer>\n    </>\n  );\n};\n\nexport default React.memo(Question);\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,sBAAsB;AACxC,OAAO,KAAKC,GAAG,MAAM,oBAAoB;AACzC,SAASC,gBAAgB,EAAEC,gBAAgB,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAU9D,MAAMC,QAAQ,GAAGC,IAAA,IAMA;EAAA,IANC;IAChBC,QAAQ;IACRC,WAAW;IACXC,SAAS;IACTC,SAAS;IACTC;EACS,CAAC,GAAAL,IAAA;EACV,MAAMM,UAAU,GAAGA,CAAA,KAAM;IACvBC,MAAM,CAACC,QAAQ,CAAC;MACdC,GAAG,EAAE,CAAC;MACNC,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ,CAAC;;EAED;EACA;;EAEA;EACA;EACA;EACA;;EAEA,oBACEd,OAAA,CAAAE,SAAA;IAAAa,QAAA,gBACEf,OAAA,CAACH,gBAAgB;MAACmB,EAAE,EAAC,OAAO;MAAAD,QAAA,gBAC1Bf,OAAA,CAACL,KAAK;QACJsB,GAAG,EAAEZ,QAAS;QACda,IAAI,EAAC,MAAM;QACXC,KAAK,EAAC,MAAM;QACZC,SAAS,EAAEX;MAAc;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACzB,EACDjB,SAAS,gBACRP,OAAA,CAACJ,GAAG,CAAC6B,OAAO;QAACC,KAAK,EAAE;UAAEP,KAAK,EAAE,MAAM;UAAEQ,MAAM,EAAE;QAAc;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,gBAEhExB,OAAA,CAACJ,GAAG,CAACgC,IAAI;QAACC,OAAO,EAAErB;MAAU;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC9B;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACgB,eACnBxB,OAAA,CAACF,gBAAgB;MAAAiB,QAAA,EACdT,WAAW,iBAAIN,OAAA,CAACJ,GAAG,CAACkC,OAAO;QAACD,OAAO,EAAEnB;MAAW;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAG;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACnC;EAAA,gBAClB;AAEP,CAAC;AAACO,EAAA,GA1CI5B,QAAQ;AA4Cd,eAAA6B,GAAA,gBAAetC,KAAK,CAACuC,IAAI,CAAC9B,QAAQ,CAAC;AAAC,IAAA4B,EAAA,EAAAC,GAAA;AAAAE,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAF,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}